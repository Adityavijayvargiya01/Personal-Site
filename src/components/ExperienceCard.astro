---
import Link from '@/components/Link.astro'
import { Badge } from '@/components/ui/badge'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

interface Props {
  experience: CollectionEntry<'experience'>
}

const { experience } = Astro.props
---

<div
  class="hover:bg-secondary/50 rounded-xl border p-4 hover-lift transition-smooth group"
>  <div class="flex flex-col gap-4">
    <div class="flex justify-start sm:shrink-0">
      {        experience.data.image ? (
          <div class="w-20 h-20 sm:w-24 sm:h-24 rounded-lg overflow-hidden border bg-white flex items-center justify-center transition-transform duration-300 group-hover:scale-105">
            <Image
              src={experience.data.image}
              alt={`${experience.data.company} logo`}
              width={96}
              height={96}
              class="object-contain w-full h-full p-2 transition-transform duration-300 group-hover:scale-110"
            />
          </div>
        ) : (
          <div class="w-20 h-20 sm:w-24 sm:h-24 rounded-lg border bg-muted/30 flex items-center justify-center transition-all duration-300 group-hover:bg-muted/50 group-hover:scale-105">
            <Icon name="lucide:building" class="size-8 sm:size-10 text-muted-foreground/60 transition-colors duration-300 group-hover:text-muted-foreground" />
          </div>
        )
      }
    </div>
    <div class="grow">
      <div class="flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2">
        <div>
          <h3 class="text-lg font-medium transition-colors duration-300 group-hover:text-primary">
            {experience.data.position}
          </h3>
          <p class="text-foreground/80 text-base font-medium transition-colors duration-300 group-hover:text-foreground">
            {experience.data.link ? (
              <Link
                href={experience.data.link}
                class="hover:text-foreground transition-colors"
                external
              >
                {experience.data.company}
              </Link>
            ) : (
              experience.data.company
            )}
          </p>
        </div>
        {
          experience.data.location && (
            <p class="text-muted-foreground/70 flex items-center gap-x-1.5 text-sm">
              <Icon name="lucide:map-pin" class="size-3" />
              <span>{experience.data.location}</span>
            </p>
          )
        }      </div>
      
      <p class="text-muted-foreground/70 mb-2 flex items-center gap-x-1.5 text-xs">
        <Icon name="lucide:calendar" class="size-3" />
        <span>
          {formatDate(experience.data.startDate)}
          {experience.data.endDate
            ? ` → ${formatDate(experience.data.endDate)}`
            : ' → Present'}
        </span>
      </p>
        {
        experience.data.tags && (
          <div class="flex flex-wrap gap-2">
            {experience.data.tags.map((tag: string) => (
              <Badge variant="secondary">{tag}</Badge>
            ))}
          </div>
        )
      }
      
      {
        experience.data.description && (
          <div class="mt-3">
            <div class="mt-3 p-3 rounded-lg bg-muted/30 border">
              <div class="text-sm text-muted-foreground leading-relaxed">
                {experience.data.description.split('.').filter(sentence => sentence.trim()).map((sentence: string) => (
                  <div class="flex items-start mb-2 last:mb-0"> 
                    <span>{sentence.trim()}.</span>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )
      }
    </div>
  </div>
</div>
