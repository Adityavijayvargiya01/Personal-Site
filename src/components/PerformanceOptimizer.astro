---
interface Props {
  criticalImages?: string[]
  preloadFonts?: string[]
}

const { criticalImages = [], preloadFonts = [] } = Astro.props
---

{criticalImages.map(imageUrl => (
  <link 
    rel="preload" 
    href={imageUrl} 
    as="image" 
    fetchpriority="high"
  />
))}

{preloadFonts.map(fontUrl => (
  <link 
    rel="preload" 
    href={fontUrl} 
    as="font" 
    type="font/woff2" 
    crossorigin
    fetchpriority="high"
  />
))}

<script>
  import { SmartPreloader } from '@/lib/performance'
  
  let preloader: SmartPreloader | null = null
  
  function initializeSmartPreloading() {
    if (preloader) {
      preloader.disconnect()
    }
    
    preloader = new SmartPreloader()
    
    // Preload links that are about to come into view
    const linkElements = document.querySelectorAll('a[href^="/"]')
    linkElements.forEach(link => {
      if (preloader) preloader.observe(link)
    })
  }
  
  // Initialize on page load
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeSmartPreloading)
  } else {
    initializeSmartPreloading()
  }
  
  // Reinitialize on Astro page transitions
  document.addEventListener('astro:after-swap', initializeSmartPreloading)
  document.addEventListener('astro:page-load', initializeSmartPreloading)
  
  // Cleanup
  document.addEventListener('astro:before-preparation', () => {
    if (preloader) {
      preloader.disconnect()
      preloader = null
    }
  })
</script>

<!-- Critical CSS for above-the-fold content -->
<style is:inline>
  /* Inline critical CSS for immediate rendering */
  .page-animate { will-change: opacity; }
  [data-scroll] { will-change: transform, opacity; }
  .transition-smooth { will-change: transform; }
  .hover-lift { will-change: transform, box-shadow; }
  .hover-scale-soft { will-change: transform; }
  .group-hover\:scale-105 { will-change: transform; }
</style>