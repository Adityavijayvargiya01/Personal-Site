---
import Link from '@/components/Link.astro'
import { Badge } from '@/components/ui/badge'
import { formatDate } from '@/lib/utils'
import { Icon } from 'astro-icon/components'
import { Image } from 'astro:assets'
import type { CollectionEntry } from 'astro:content'

interface Props {
  project: CollectionEntry<'projects'>
}

const { project } = Astro.props
---

<div
  class="project-card group hover:bg-secondary/50 rounded-xl border p-4 hover-lift hover-scale-soft transition-smooth"
  data-scroll
  data-scroll-animation="slide-up-soft"
>
  <Link
    href={project.data.link}
    class="flex flex-col gap-4 sm:flex-row"
    external
  >    {
      project.data.image && (
        <div class="w-full sm:max-w-3xs sm:shrink-0 overflow-hidden rounded-xl">
          <Image
            src={project.data.image}
            alt={project.data.name}
            width={400}
            height={210}
            class="w-full object-cover rounded-xl transition-smooth group-hover:scale-105"
            quality={85}
            loading="lazy"
            decoding="async"
            format="webp"
            fallbackFormat="jpg"
            widths={[200, 400, 600]}
            sizes="(max-width: 640px) 100vw, 400px"
          />
        </div>
      )
    }
    <div class="grow">
      <h3 class="mb-1 text-lg font-medium transition-colors duration-300 group-hover:text-primary">
        {project.data.name}
      </h3>
      <p class="text-muted-foreground mb-2 text-sm">
        {project.data.description}
      </p>
      {
        project.data.startDate && (
          <p class="text-muted-foreground/70 mb-2 flex items-center gap-x-1.5 text-xs">
            <span class="flex items-center gap-x-1.5">
              <Icon name="lucide:calendar" class="size-3" />
              <span>
                {formatDate(project.data.startDate)}
                {project.data.endDate
                  ? ` → ${formatDate(project.data.endDate)}`
                  : ' → Present'}
              </span>
            </span>
          </p>
        )
      }
      {
        project.data.tags && (
          <div class="flex flex-wrap gap-2">
            {project.data.tags.map((tag: string) => (
              <Badge variant="secondary">{tag}</Badge>
            ))}
          </div>
        )
      }    </div>
  </Link>
</div>

<!-- Removed all script for scroll animations and grayscale effects -->
